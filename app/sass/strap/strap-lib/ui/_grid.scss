//
//  Basic styles for grid
//

html {
	font-size: $BASE_FONT_SIZE;
	line-height: $BASE_LINE_HEIGHT;
}


.Container {
	max-width: $content-width;
	margin: auto;
	padding: 0 gutter(1);
}

.Row {
	@include clearfix;
	width: 100%;
	margin: auto;
	display: table;
	border: none;
	margin-bottom: line(0.5);

	[class*="Col-"] {
		display: table-cell;
		border-collapse: collapse;
		min-height: 1px;

		&:first-child {
			padding-left: 0;
		}

		// Alignment
		&.Middle {
			vertical-align: middle;
		}
		&.Bottom {
			vertical-align: bottom;
		}
		&.Top {
			vertical-align: top;
		}
		&.Center {
			text-align: center;
		}
		&.Left {
			text-align: left;
		}
		&.Right {
			text-align: right;
		}
	}
	&:last-child {
		margin-bottom: 0;
	}


	@for $i from 1 through $TOTAL_COLUMNS {
		.Col-#{$i} {
			width: columns($i);
			max-width: columns($i);
			min-width: columns($i);
			padding-left: gutter(1);
		}
		[class*="Col-"].Offset-#{$i} {
			padding-left: columns($i) + gutter(2);

			&:first-child {
				padding-left: columns($i) + gutter(1);
			}
		}
	}

}







//
//  Mixins for grid's breakpoints
//

@mixin _drop-off-columns ($dropped-columns, $start:1) {
	display: block;

	@for $i from round($start) through round($dropped-columns)  {
		> .Col-#{$i} {
			max-width: 100%;
			min-width: 0;
			width: 100%;
			display: block;
			padding-left: 0;
			margin-bottom: line(0.5);

			&[class*="Offset-"] {
				padding-left: 0;

				&:first-child {
					padding-left: 0;
				}
			}
		}
	}
}


//
//  Grid breakpoints
//

$current-content-width: calculate-content-width();
$current-column-width: $COLUMN_WIDTH;

@while $current-content-width > $BREAKPOINT_PHONE_LANDSCAPE {
	@include breakpoint ($current-content-width + $GUTTER_WIDTH*2) {
		$current-column-width: round($current-column-width - $COLUMN_WIDTH / $TOTAL_COLUMNS) !global;
		$current-content-width: calculate-content-width($TOTAL_COLUMNS, $current-column-width, $GUTTER_WIDTH) !global;

		.Container {
			max-width: $current-content-width;
		}


		.Row {

			@for $i from 1 through $TOTAL_COLUMNS {
				.Col-#{$i} {
					width: columns($i, $current-column-width);
					max-width: columns($i, $current-column-width);
					min-width: columns($i, $current-column-width);
				}
				[class*="Col-"].Offset-#{$i} {
					padding-left: columns($i, $current-column-width) + gutter(2);

					&:first-child {
						padding-left: columns($i, $current-column-width) + gutter(1);
					}
				}
			}
		}
	}
}

// Default breakpoint
@include breakpoint (phone landscape) {
	.Row:not(.Break):not(.NoBreak) {
		@include _drop-off-columns($TOTAL_COLUMNS);
	}
	.Row > [class*="Col-"] {
		min-width: 0;
	}
}

// Phones breakpoint
@include breakpoint (phone) {
	html {
		font-size: max($BASE_FONT_SIZE * 0.6, 10px);
	}
	.Row.Phone.Break {
		@include _drop-off-columns($TOTAL_COLUMNS);
	}
	.Phone.Hide {
		display: none;
	}
	.Row > [class*="Col-"] {
		min-width: 0;
	}
}
@include breakpoint (phone landscape) {
	html {
		font-size: max($BASE_FONT_SIZE * 0.7, 10px);
	}
	.Row.Phone.Landscape.Break {
		@include _drop-off-columns($TOTAL_COLUMNS);
	}
	.Phone.Landscape.Hide {
		display: none;
	}
	.Row > [class*="Col-"] {
		min-width: 0;
	}
}

// Tablets breakpoint
@include breakpoint (tablet) {
	html {
		font-size: max($BASE_FONT_SIZE * 0.8, 10px);
	}

	.Row.Tablet.Break {
		@include _drop-off-columns($TOTAL_COLUMNS);
	}
	.Tablet.Hide {
		display: none;
	}
	.Row > [class*="Col-"] {
		min-width: 0;
	}
}
@include breakpoint (tablet landscape) {
	html {
		font-size: max($BASE_FONT_SIZE * 0.9, 10px);
	}

	.Row.Tablet.Landscape.Break {
		@include _drop-off-columns($TOTAL_COLUMNS);
	}
	.Tablet.Landscape.Hide {
		display: none;
	}
	.Row > [class*="Col-"] {
		min-width: 0;
	}
}